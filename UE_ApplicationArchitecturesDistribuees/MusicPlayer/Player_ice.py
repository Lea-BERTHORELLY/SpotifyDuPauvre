# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `Player.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module MusicPlayer
_M_MusicPlayer = Ice.openModule('MusicPlayer')
__name__ = 'MusicPlayer'

if '_t_bytes' not in _M_MusicPlayer.__dict__:
    _M_MusicPlayer._t_bytes = IcePy.defineSequence('::MusicPlayer::bytes', (), IcePy._t_byte)

if '_t_StringSeq' not in _M_MusicPlayer.__dict__:
    _M_MusicPlayer._t_StringSeq = IcePy.defineSequence('::MusicPlayer::StringSeq', (), IcePy._t_string)

_M_MusicPlayer._t_Player = IcePy.defineValue('::MusicPlayer::Player', Ice.Value, -1, (), False, True, None, ())

if 'PlayerPrx' not in _M_MusicPlayer.__dict__:
    _M_MusicPlayer.PlayerPrx = Ice.createTempClass()
    class PlayerPrx(Ice.ObjectPrx):

        def GetNumberOfMusics(self, context=None):
            return _M_MusicPlayer.Player._op_GetNumberOfMusics.invoke(self, ((), context))

        def GetNumberOfMusicsAsync(self, context=None):
            return _M_MusicPlayer.Player._op_GetNumberOfMusics.invokeAsync(self, ((), context))

        def begin_GetNumberOfMusics(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicPlayer.Player._op_GetNumberOfMusics.begin(self, ((), _response, _ex, _sent, context))

        def end_GetNumberOfMusics(self, _r):
            return _M_MusicPlayer.Player._op_GetNumberOfMusics.end(self, _r)

        def AddMusic(self, offset, partiesMusique, path, titre, artistes, album, context=None):
            return _M_MusicPlayer.Player._op_AddMusic.invoke(self, ((offset, partiesMusique, path, titre, artistes, album), context))

        def AddMusicAsync(self, offset, partiesMusique, path, titre, artistes, album, context=None):
            return _M_MusicPlayer.Player._op_AddMusic.invokeAsync(self, ((offset, partiesMusique, path, titre, artistes, album), context))

        def begin_AddMusic(self, offset, partiesMusique, path, titre, artistes, album, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicPlayer.Player._op_AddMusic.begin(self, ((offset, partiesMusique, path, titre, artistes, album), _response, _ex, _sent, context))

        def end_AddMusic(self, _r):
            return _M_MusicPlayer.Player._op_AddMusic.end(self, _r)

        def AddMusicDatabase(self, titre, artistes, album, context=None):
            return _M_MusicPlayer.Player._op_AddMusicDatabase.invoke(self, ((titre, artistes, album), context))

        def AddMusicDatabaseAsync(self, titre, artistes, album, context=None):
            return _M_MusicPlayer.Player._op_AddMusicDatabase.invokeAsync(self, ((titre, artistes, album), context))

        def begin_AddMusicDatabase(self, titre, artistes, album, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicPlayer.Player._op_AddMusicDatabase.begin(self, ((titre, artistes, album), _response, _ex, _sent, context))

        def end_AddMusicDatabase(self, _r):
            return _M_MusicPlayer.Player._op_AddMusicDatabase.end(self, _r)

        def DeleteMusic(self, name, context=None):
            return _M_MusicPlayer.Player._op_DeleteMusic.invoke(self, ((name, ), context))

        def DeleteMusicAsync(self, name, context=None):
            return _M_MusicPlayer.Player._op_DeleteMusic.invokeAsync(self, ((name, ), context))

        def begin_DeleteMusic(self, name, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicPlayer.Player._op_DeleteMusic.begin(self, ((name, ), _response, _ex, _sent, context))

        def end_DeleteMusic(self, _r):
            return _M_MusicPlayer.Player._op_DeleteMusic.end(self, _r)

        def ModifyMusic(self, musiqueAModifier, nouveauTitre, nouveauxArtistes, nouvelAlbum, context=None):
            return _M_MusicPlayer.Player._op_ModifyMusic.invoke(self, ((musiqueAModifier, nouveauTitre, nouveauxArtistes, nouvelAlbum), context))

        def ModifyMusicAsync(self, musiqueAModifier, nouveauTitre, nouveauxArtistes, nouvelAlbum, context=None):
            return _M_MusicPlayer.Player._op_ModifyMusic.invokeAsync(self, ((musiqueAModifier, nouveauTitre, nouveauxArtistes, nouvelAlbum), context))

        def begin_ModifyMusic(self, musiqueAModifier, nouveauTitre, nouveauxArtistes, nouvelAlbum, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicPlayer.Player._op_ModifyMusic.begin(self, ((musiqueAModifier, nouveauTitre, nouveauxArtistes, nouvelAlbum), _response, _ex, _sent, context))

        def end_ModifyMusic(self, _r):
            return _M_MusicPlayer.Player._op_ModifyMusic.end(self, _r)

        def PrintMusics(self, i, context=None):
            return _M_MusicPlayer.Player._op_PrintMusics.invoke(self, ((i, ), context))

        def PrintMusicsAsync(self, i, context=None):
            return _M_MusicPlayer.Player._op_PrintMusics.invokeAsync(self, ((i, ), context))

        def begin_PrintMusics(self, i, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicPlayer.Player._op_PrintMusics.begin(self, ((i, ), _response, _ex, _sent, context))

        def end_PrintMusics(self, _r):
            return _M_MusicPlayer.Player._op_PrintMusics.end(self, _r)

        def Play(self, music, context=None):
            return _M_MusicPlayer.Player._op_Play.invoke(self, ((music, ), context))

        def PlayAsync(self, music, context=None):
            return _M_MusicPlayer.Player._op_Play.invokeAsync(self, ((music, ), context))

        def begin_Play(self, music, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicPlayer.Player._op_Play.begin(self, ((music, ), _response, _ex, _sent, context))

        def end_Play(self, _r):
            return _M_MusicPlayer.Player._op_Play.end(self, _r)

        def Pause(self, context=None):
            return _M_MusicPlayer.Player._op_Pause.invoke(self, ((), context))

        def PauseAsync(self, context=None):
            return _M_MusicPlayer.Player._op_Pause.invokeAsync(self, ((), context))

        def begin_Pause(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicPlayer.Player._op_Pause.begin(self, ((), _response, _ex, _sent, context))

        def end_Pause(self, _r):
            return _M_MusicPlayer.Player._op_Pause.end(self, _r)

        def Stop(self, context=None):
            return _M_MusicPlayer.Player._op_Stop.invoke(self, ((), context))

        def StopAsync(self, context=None):
            return _M_MusicPlayer.Player._op_Stop.invokeAsync(self, ((), context))

        def begin_Stop(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicPlayer.Player._op_Stop.begin(self, ((), _response, _ex, _sent, context))

        def end_Stop(self, _r):
            return _M_MusicPlayer.Player._op_Stop.end(self, _r)

        def SearchTitle(self, title, context=None):
            return _M_MusicPlayer.Player._op_SearchTitle.invoke(self, ((title, ), context))

        def SearchTitleAsync(self, title, context=None):
            return _M_MusicPlayer.Player._op_SearchTitle.invokeAsync(self, ((title, ), context))

        def begin_SearchTitle(self, title, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicPlayer.Player._op_SearchTitle.begin(self, ((title, ), _response, _ex, _sent, context))

        def end_SearchTitle(self, _r):
            return _M_MusicPlayer.Player._op_SearchTitle.end(self, _r)

        def searchAuthor(self, author, context=None):
            return _M_MusicPlayer.Player._op_searchAuthor.invoke(self, ((author, ), context))

        def searchAuthorAsync(self, author, context=None):
            return _M_MusicPlayer.Player._op_searchAuthor.invokeAsync(self, ((author, ), context))

        def begin_searchAuthor(self, author, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicPlayer.Player._op_searchAuthor.begin(self, ((author, ), _response, _ex, _sent, context))

        def end_searchAuthor(self, _r):
            return _M_MusicPlayer.Player._op_searchAuthor.end(self, _r)

        def Avancer(self, context=None):
            return _M_MusicPlayer.Player._op_Avancer.invoke(self, ((), context))

        def AvancerAsync(self, context=None):
            return _M_MusicPlayer.Player._op_Avancer.invokeAsync(self, ((), context))

        def begin_Avancer(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicPlayer.Player._op_Avancer.begin(self, ((), _response, _ex, _sent, context))

        def end_Avancer(self, _r):
            return _M_MusicPlayer.Player._op_Avancer.end(self, _r)

        def Reculer(self, secondes, context=None):
            return _M_MusicPlayer.Player._op_Reculer.invoke(self, ((secondes, ), context))

        def ReculerAsync(self, secondes, context=None):
            return _M_MusicPlayer.Player._op_Reculer.invokeAsync(self, ((secondes, ), context))

        def begin_Reculer(self, secondes, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicPlayer.Player._op_Reculer.begin(self, ((secondes, ), _response, _ex, _sent, context))

        def end_Reculer(self, _r):
            return _M_MusicPlayer.Player._op_Reculer.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_MusicPlayer.PlayerPrx.ice_checkedCast(proxy, '::MusicPlayer::Player', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_MusicPlayer.PlayerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::MusicPlayer::Player'
    _M_MusicPlayer._t_PlayerPrx = IcePy.defineProxy('::MusicPlayer::Player', PlayerPrx)

    _M_MusicPlayer.PlayerPrx = PlayerPrx
    del PlayerPrx

    _M_MusicPlayer.Player = Ice.createTempClass()
    class Player(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::MusicPlayer::Player')

        def ice_id(self, current=None):
            return '::MusicPlayer::Player'

        @staticmethod
        def ice_staticId():
            return '::MusicPlayer::Player'

        def GetNumberOfMusics(self, current=None):
            raise NotImplementedError("servant method 'GetNumberOfMusics' not implemented")

        def AddMusic(self, offset, partiesMusique, path, titre, artistes, album, current=None):
            raise NotImplementedError("servant method 'AddMusic' not implemented")

        def AddMusicDatabase(self, titre, artistes, album, current=None):
            raise NotImplementedError("servant method 'AddMusicDatabase' not implemented")

        def DeleteMusic(self, name, current=None):
            raise NotImplementedError("servant method 'DeleteMusic' not implemented")

        def ModifyMusic(self, musiqueAModifier, nouveauTitre, nouveauxArtistes, nouvelAlbum, current=None):
            raise NotImplementedError("servant method 'ModifyMusic' not implemented")

        def PrintMusics(self, i, current=None):
            raise NotImplementedError("servant method 'PrintMusics' not implemented")

        def Play(self, music, current=None):
            raise NotImplementedError("servant method 'Play' not implemented")

        def Pause(self, current=None):
            raise NotImplementedError("servant method 'Pause' not implemented")

        def Stop(self, current=None):
            raise NotImplementedError("servant method 'Stop' not implemented")

        def SearchTitle(self, title, current=None):
            raise NotImplementedError("servant method 'SearchTitle' not implemented")

        def searchAuthor(self, author, current=None):
            raise NotImplementedError("servant method 'searchAuthor' not implemented")

        def Avancer(self, current=None):
            raise NotImplementedError("servant method 'Avancer' not implemented")

        def Reculer(self, secondes, current=None):
            raise NotImplementedError("servant method 'Reculer' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_MusicPlayer._t_PlayerDisp)

        __repr__ = __str__

    _M_MusicPlayer._t_PlayerDisp = IcePy.defineClass('::MusicPlayer::Player', Player, (), None, ())
    Player._ice_type = _M_MusicPlayer._t_PlayerDisp

    Player._op_GetNumberOfMusics = IcePy.Operation('GetNumberOfMusics', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Player._op_AddMusic = IcePy.Operation('AddMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_MusicPlayer._t_bytes, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    Player._op_AddMusicDatabase = IcePy.Operation('AddMusicDatabase', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    Player._op_DeleteMusic = IcePy.Operation('DeleteMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Player._op_ModifyMusic = IcePy.Operation('ModifyMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    Player._op_PrintMusics = IcePy.Operation('PrintMusics', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_MusicPlayer._t_StringSeq, False, 0), ())
    Player._op_Play = IcePy.Operation('Play', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Player._op_Pause = IcePy.Operation('Pause', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Player._op_Stop = IcePy.Operation('Stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Player._op_SearchTitle = IcePy.Operation('SearchTitle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Player._op_searchAuthor = IcePy.Operation('searchAuthor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Player._op_Avancer = IcePy.Operation('Avancer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Player._op_Reculer = IcePy.Operation('Reculer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())

    _M_MusicPlayer.Player = Player
    del Player

_M_MusicPlayer._t_PlayerFactory = IcePy.defineValue('::MusicPlayer::PlayerFactory', Ice.Value, -1, (), False, True, None, ())

if 'PlayerFactoryPrx' not in _M_MusicPlayer.__dict__:
    _M_MusicPlayer.PlayerFactoryPrx = Ice.createTempClass()
    class PlayerFactoryPrx(Ice.ObjectPrx):

        def createPlayer(self, context=None):
            return _M_MusicPlayer.PlayerFactory._op_createPlayer.invoke(self, ((), context))

        def createPlayerAsync(self, context=None):
            return _M_MusicPlayer.PlayerFactory._op_createPlayer.invokeAsync(self, ((), context))

        def begin_createPlayer(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicPlayer.PlayerFactory._op_createPlayer.begin(self, ((), _response, _ex, _sent, context))

        def end_createPlayer(self, _r):
            return _M_MusicPlayer.PlayerFactory._op_createPlayer.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_MusicPlayer.PlayerFactoryPrx.ice_checkedCast(proxy, '::MusicPlayer::PlayerFactory', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_MusicPlayer.PlayerFactoryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::MusicPlayer::PlayerFactory'
    _M_MusicPlayer._t_PlayerFactoryPrx = IcePy.defineProxy('::MusicPlayer::PlayerFactory', PlayerFactoryPrx)

    _M_MusicPlayer.PlayerFactoryPrx = PlayerFactoryPrx
    del PlayerFactoryPrx

    _M_MusicPlayer.PlayerFactory = Ice.createTempClass()
    class PlayerFactory(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::MusicPlayer::PlayerFactory')

        def ice_id(self, current=None):
            return '::MusicPlayer::PlayerFactory'

        @staticmethod
        def ice_staticId():
            return '::MusicPlayer::PlayerFactory'

        def createPlayer(self, current=None):
            raise NotImplementedError("servant method 'createPlayer' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_MusicPlayer._t_PlayerFactoryDisp)

        __repr__ = __str__

    _M_MusicPlayer._t_PlayerFactoryDisp = IcePy.defineClass('::MusicPlayer::PlayerFactory', PlayerFactory, (), None, ())
    PlayerFactory._ice_type = _M_MusicPlayer._t_PlayerFactoryDisp

    PlayerFactory._op_createPlayer = IcePy.Operation('createPlayer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_MusicPlayer._t_PlayerPrx, False, 0), ())

    _M_MusicPlayer.PlayerFactory = PlayerFactory
    del PlayerFactory

# End of module MusicPlayer
